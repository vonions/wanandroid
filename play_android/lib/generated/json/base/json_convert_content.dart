// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:play_android/bean/home_banner_result_entity.dart';
import 'package:play_android/generated/json/home_banner_result_entity_helper.dart';
import 'package:play_android/bean/home_list_result_entity.dart';
import 'package:play_android/generated/json/home_list_result_entity_helper.dart';
import 'package:play_android/bean/home_hot_net_result_entity.dart';
import 'package:play_android/generated/json/home_hot_net_result_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case HomeBannerResultEntity:
			return homeBannerResultEntityFromJson(data as HomeBannerResultEntity, json) as T;			case HomeBannerResultData:
			return homeBannerResultDataFromJson(data as HomeBannerResultData, json) as T;			case HomeListResultEntity:
			return homeListResultEntityFromJson(data as HomeListResultEntity, json) as T;			case HomeListResultData:
			return homeListResultDataFromJson(data as HomeListResultData, json) as T;			case HomeListResultDataData:
			return homeListResultDataDataFromJson(data as HomeListResultDataData, json) as T;			case HomeHotNetResultEntity:
			return homeHotNetResultEntityFromJson(data as HomeHotNetResultEntity, json) as T;			case HomeHotNetResultData:
			return homeHotNetResultDataFromJson(data as HomeHotNetResultData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case HomeBannerResultEntity:
			return homeBannerResultEntityToJson(data as HomeBannerResultEntity);			case HomeBannerResultData:
			return homeBannerResultDataToJson(data as HomeBannerResultData);			case HomeListResultEntity:
			return homeListResultEntityToJson(data as HomeListResultEntity);			case HomeListResultData:
			return homeListResultDataToJson(data as HomeListResultData);			case HomeListResultDataData:
			return homeListResultDataDataToJson(data as HomeListResultDataData);			case HomeHotNetResultEntity:
			return homeHotNetResultEntityToJson(data as HomeHotNetResultEntity);			case HomeHotNetResultData:
			return homeHotNetResultDataToJson(data as HomeHotNetResultData);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'HomeBannerResultEntity':
			return HomeBannerResultEntity().fromJson(json);			case 'HomeBannerResultData':
			return HomeBannerResultData().fromJson(json);			case 'HomeListResultEntity':
			return HomeListResultEntity().fromJson(json);			case 'HomeListResultData':
			return HomeListResultData().fromJson(json);			case 'HomeListResultDataData':
			return HomeListResultDataData().fromJson(json);			case 'HomeHotNetResultEntity':
			return HomeHotNetResultEntity().fromJson(json);			case 'HomeHotNetResultData':
			return HomeHotNetResultData().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'HomeBannerResultEntity':
			return List<HomeBannerResultEntity>();			case 'HomeBannerResultData':
			return List<HomeBannerResultData>();			case 'HomeListResultEntity':
			return List<HomeListResultEntity>();			case 'HomeListResultData':
			return List<HomeListResultData>();			case 'HomeListResultDataData':
			return List<HomeListResultDataData>();			case 'HomeHotNetResultEntity':
			return List<HomeHotNetResultEntity>();			case 'HomeHotNetResultData':
			return List<HomeHotNetResultData>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}